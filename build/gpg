# gnupg - complete and free implementation of the OpenPGP standard
# This tool allows you to encrypt and sign your data and communications.
# It requires a number of libraries which can all be downloaded from
# the GnuPG FTP server. The download page lists the latest versions.
# https://gnupg.org/download/index.html

# base image
FROM alpine:latest as build

# install requirements
RUN apk add --no-cache gnupg build-base linux-headers curl jq tar xz # common base
RUN apk add --no-cache zlib-dev

# import gpg keys and trust them
COPY gpg.keys /gpgkeys
RUN gpg --import </gpgkeys && printf '%s:6:\n' \
  D8692123C4065DEA5E0F3AB5249B39D24F25E3B6 \
  031EC2536E580D8EA286A9F22071B08A33BD3F06 \
  5B80C5754298F0CB55D8ED6ABCEF7E294B092E28 \
  6DAA6E64A76D2840571B4902528897B826403ADA \
  80CC1B8D04C262DDFEE1980C6F7F0F91D138FC7B \
  | gpg --import-ownertrust

# download gnupg sources and verify their signatures
WORKDIR /download
RUN curl -s "https://gnupg.org/download/index.html" \
  | sed -n 's/.*"\/ftp\/gcrypt\/\([a-z-]\+\)\/[a-z-]\+-\([0-9.]\+\)\.tar\.bz2".*/\1 \2/p' > VERSIONS \
  && set -e \
  && for pkg in gnupg libgpg-error libgcrypt libksba libassuan ntbtls npth pinentry; do \
      v=$(awk "\$1 == \"$pkg\" { print \$2; exit }" VERSIONS); \
      echo "Downloading $pkg version $v ..."; \
      MIRROR="https://gnupg.org/ftp/gcrypt"; \
      wget \
        "$MIRROR/$pkg/$pkg-$v.tar.bz2" \
        "$MIRROR/$pkg/$pkg-$v.tar.bz2.sig"; \
      gpg --verify "$pkg-$v.tar.bz2.sig"; \
    done

# download and verify sqlite sources
ARG SQLITE_LINK="https://sqlite.org/2020/sqlite-autoconf-3330000.tar.gz"
ARG SQLITE_SHA3="6e94e9453cedf8f2023e3923f856741d1e28a2271e9f93d24d95fa48870edaad"
RUN wget "$SQLITE_LINK" \
  && echo "$SQLITE_SHA3  $(basename "$SQLITE_LINK")" | sha3sum -a 256 -c

# extract sources
WORKDIR /build
RUN for t in /download/*.tar.*; do tar xf "$t"; done

# insert compilation helper
RUN printf $'#/usr/bin/env ash\n\
package=$1; shift 1;\n\
(cd "$package"* && { if [[ -f configure ]]; then ./configure $@; else true; fi; } && make -j$(nproc) && make install)\n\
' > /usr/bin/compile && chmod +x /usr/bin/compile

# compilation environment
ENV LDFLAGS="-Wl,-z,now -Wl,-z,relro -static -s"
ENV CFLAGS="-fPIC -pie -fstack-protector-all -O2 -D_FORTIFY_SOURCE=2 -static -s"
# compile libraries in correct order
RUN compile sqlite-autoconf
RUN compile libgpg-error
RUN compile libassuan
RUN compile libgcrypt
RUN compile libksba
RUN compile npth
RUN compile ntbtls
# compile pinentry helper
RUN compile pinentry \
  --enable-pinentry-tty
# compile gpg binary
RUN compile gnupg \
  --prefix=/usr \
  --localstatedir=/var \
  --disable-gpgsm \
  --disable-scdaemon \
  --enable-symcryptrun \
  --enable-large-secmem \
  --enable-tofu \
  --disable-photo-viewers \
  --disable-gpg-idea \
  --disable-gpg-cast5 \
  --disable-gpg-blowfish \
  --disable-gpg-twofish \
  --disable-gpg-camellia128 \
  --disable-gpg-camellia192 \
  --disable-gpg-camellia256 \
  --disable-gpg-md5 \
  --disable-gpg-rmd160

# copy binaries to new stage
FROM scratch
COPY --from=build /usr/local/bin/pinentry-tty /
COPY --from=build /usr/bin/gpg /usr/bin/gpg-agent /usr/bin/gpgv /
