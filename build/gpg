# gnupg - complete and free implementation of the OpenPGP standard
# This tool allows you to encrypt and sign your data and communications.
# It requires a number of libraries which can all be downloaded from
# the GnuPG FTP server. The download page lists the latest versions.
# https://gnupg.org/download/index.html

# base image
FROM alpine:latest as build

# install requirements
RUN apk add --no-cache gnupg build-base linux-headers curl jq tar # common base
RUN apk add --no-cache zlib-dev

# switch to build directory
WORKDIR /build

# download gnupg packages
RUN ash -c $'\n\
gnupgdl() { \n\
  ftp="https://gnupg.org/ftp/gcrypt" \n\
  pkg=$1; ver=$2; z=${3:-bz2}; \n\
  echo "ARGUMENTS: $@" \n\
  wget \
    "$ftp/$pkg/$pkg-$ver.tar.$z" \
    "$ftp/$pkg/$pkg-$ver.tar.$z.sig" \n\
} \n\
gnupgdl gnupg         2.2.17          \n\
gnupgdl libgpg-error  1.36            \n\
gnupgdl libgcrypt     1.8.4           \n\
gnupgdl libksba       1.3.5           \n\
gnupgdl libassuan     2.5.3           \n\
gnupgdl ntbtls        0.1.2           \n\
gnupgdl npth          1.6             \n\
gnupgdl pinentry      1.1.0           \n\
gnupgdl bzip2         1.0.6-g10  gz   \n\
'

# download sqlite
ENV SQLITE_LINK="https://www.sqlite.org/2018/sqlite-autoconf-3250200.tar.gz"
ENV SQLITE_SHA1="aedfbdc14eb700099434d6a743135743cff47393"
RUN wget "$SQLITE_LINK"

# import gpg keys and trust them
COPY gpg.keys /gpgkeys
RUN gpg --import </gpgkeys
RUN printf '%s:6:\n' \
  D8692123C4065DEA5E0F3AB5249B39D24F25E3B6 \
  031EC2536E580D8EA286A9F22071B08A33BD3F06 \
  7B96D396E6471601754BE4DB53B620D01CE0C630 \
  | gpg --import-ownertrust

# verify signatures on gnupg packages
RUN for s in *.sig; do gpg --verify "$s"; rm -f "$s"; done

# verify hash on sqlite
RUN echo "$SQLITE_SHA1  $(basename "$SQLITE_LINK")" | sha1sum -c

# extract packages
RUN for t in *.tar.*; do tar xf "$t"; done

# insert compilation helper
RUN printf $'#/usr/bin/env ash\n\
package=$1; shift 1;\n\
(cd "$package"* && { if [[ -f configure ]]; then ./configure $@; else true; fi; } && make -j$(nproc) && make install)\n\
' > /usr/bin/compile && chmod +x /usr/bin/compile

# compilation environment
ENV LDFLAGS="-Wl,-z,now -Wl,-z,relro -static -s"
ENV CFLAGS="-fPIC -pie -fstack-protector-all -O2 -D_FORTIFY_SOURCE=2 -static -s"

# compile libraries in correct order
RUN compile bzip2
RUN compile sqlite-autoconf
RUN compile libgpg-error
RUN compile libassuan
RUN compile libgcrypt
RUN compile libksba
RUN compile npth
RUN compile ntbtls
# compile pinentry helper
RUN compile pinentry \
  --enable-pinentry-tty
# compile gpg binary
RUN compile gnupg \
  --prefix=/usr \
  --localstatedir=/var \
  --disable-gpgsm \
  --disable-scdaemon \
  --enable-symcryptrun \
  --enable-large-secmem \
  --enable-tofu \
  --disable-photo-viewers \
  --disable-gpg-idea \
  --disable-gpg-cast5 \
  --disable-gpg-blowfish \
  --disable-gpg-twofish \
  --disable-gpg-camellia128 \
  --disable-gpg-camellia192 \
  --disable-gpg-camellia256 \
  --disable-gpg-md5 \
  --disable-gpg-rmd160

# copy binary to empty stage
FROM scratch
COPY --from=build /usr/local/bin/pinentry-tty /
COPY --from=build /usr/bin/gpg /usr/bin/gpg-agent /usr/bin/gpgv /
